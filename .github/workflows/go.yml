# This workflow will build and test a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run tests
      run: go test -v ./...

    - name: Check go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_ID="build-$(date +%s)"
        
        BINARY_NAME="version"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="version.exe"
        fi
        
        go build -ldflags "-X main.buildTime=$BUILD_TIME -X main.commitHash=$COMMIT_HASH -X main.buildID=$BUILD_ID" -o $BINARY_NAME .
