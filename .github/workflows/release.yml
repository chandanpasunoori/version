name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release from'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
          - os: windows
            arch: arm64
            goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Set build variables
      run: |
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_ID="build-$(date +%s)"
        
        # Get tag from trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="version"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="version.exe"
        fi
        
        ARCHIVE_NAME="version_${TAG}_${{ matrix.os }}_${{ matrix.arch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          ARCHIVE_NAME="${ARCHIVE_NAME}.zip"
        else
          ARCHIVE_NAME="${ARCHIVE_NAME}.tar.gz"
        fi
        
        go build \
          -ldflags "-X main.buildTime=$BUILD_TIME -X main.commitHash=$COMMIT_HASH -X main.buildID=$BUILD_ID" \
          -o $BINARY_NAME .
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip $ARCHIVE_NAME $BINARY_NAME
        else
          tar -czf $ARCHIVE_NAME $BINARY_NAME
        fi
        
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{ env.ARCHIVE_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set tag variable
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p ./release-assets
        find ./artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" ./release-assets/
        done
        ls -la ./release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG }}
        name: Release ${{ env.TAG }}
        draft: false
        prerelease: false
        files: ./release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set tag and version variables
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        VERSION=${TAG#v}  # Remove 'v' prefix for version
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Get release URLs and checksums
      run: |
        # Wait a bit for the release to be fully available
        sleep 30
        
        REPO="${{ github.repository }}"
        
        # Download the macOS arm64 binary for checksum
        curl -L -o version_macos_arm64.tar.gz \
          "https://github.com/$REPO/releases/download/$TAG/version_${TAG}_darwin_arm64.tar.gz"
        
        # Download the macOS amd64 binary for checksum  
        curl -L -o version_macos_amd64.tar.gz \
          "https://github.com/$REPO/releases/download/$TAG/version_${TAG}_darwin_amd64.tar.gz"
        
        # Calculate checksums
        ARM64_SHA=$(shasum -a 256 version_macos_arm64.tar.gz | cut -d' ' -f1)
        AMD64_SHA=$(shasum -a 256 version_macos_amd64.tar.gz | cut -d' ' -f1)
        
        echo "ARM64_SHA=$ARM64_SHA" >> $GITHUB_ENV
        echo "AMD64_SHA=$AMD64_SHA" >> $GITHUB_ENV
        echo "REPO=$REPO" >> $GITHUB_ENV

    - name: Update Homebrew Formula
      run: |
        # Create the homebrew formula
        cat > version.rb << EOF
        class Version < Formula
          desc "Tag Generator CLI - Generate semantic version tags for your projects"
          homepage "https://github.com/$REPO"
          version "$VERSION"
        
          if Hardware::CPU.arm?
            url "https://github.com/$REPO/releases/download/$TAG/version_${TAG}_darwin_arm64.tar.gz"
            sha256 "$ARM64_SHA"
          else
            url "https://github.com/$REPO/releases/download/$TAG/version_${TAG}_darwin_amd64.tar.gz"
            sha256 "$AMD64_SHA"
          end
        
          def install
            bin.install "version"
          end
        
          test do
            # Test that the binary runs and shows help
            output = shell_output("#{bin}/version -h", 2)
            assert_match "Usage of", output
          end
        end
        EOF
        
        echo "Generated Homebrew formula:"
        cat version.rb

    - name: Update Homebrew Tap Repository
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.HOMEBREW_TAP_TOKEN }}
      with:
        source-directory: .
        source-files: version.rb
        destination-github-username: chandanpasunoori
        destination-repository-name: homebrew-tap
        destination-directory: Formula
        user-email: action@github.com
        user-name: GitHub Actions
        commit-message: "Update version formula to ${{ env.VERSION }}"